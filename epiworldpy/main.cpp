#include <sys/stat.h>

#include <pybind11/iostream.h>
#include <pybind11/numpy.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h> // silently fails when removed.

#include "database.hpp"
#include "diagram.hpp"
#include "entity.hpp"
#include "misc.hpp"
#include "model.hpp"
#include "tool.hpp"
#include "virus.hpp"

namespace py = pybind11;
using namespace epiworld;

#define STRINGIFY(x) #x
#define MACRO_STRINGIFY(x) STRINGIFY(x)

PYBIND11_MODULE(_core, m) {
	auto update_fun =
		py::class_<UpdateFun<int>>(m, "UpdateFun", "Model update functions.");
	auto model = py::class_<Model<int>>(
		m, "Model", "A generic model of some kind; a parent class.");
	auto database = py::class_<DataBase<int>, std::shared_ptr<DataBase<int>>>(
		m, "DataBase", "A container for data generated by a model run.");
	auto diagram_type = py::enum_<DiagramType>(m, "DiagramType");
	auto diagram = py::class_<ModelDiagram, std::shared_ptr<ModelDiagram>>(
		m, "ModelDiagram", "Exporting a diagram from a model.");
	auto entity = py::class_<Entity<int>, std::shared_ptr<Entity<int>>>(
		m, "Entity", "Unknown.");
	auto tool =
		py::class_<Tool<int>>(m, "Tool", "A tool for modifying virus spread.");
	auto virus = py::class_<Virus<int>>(m, "Virus", "A virus.");

	epiworldpy::export_update_fun(update_fun);
	epiworldpy::export_model(model);
	epiworldpy::export_database(database);
	epiworldpy::export_diagram_type(diagram_type);
	epiworldpy::export_diagram(diagram);
	epiworldpy::export_entity(entity);
	epiworldpy::export_tool(tool);
	epiworldpy::export_virus(virus);

	auto m_epimodels = m.def_submodule("epimodels", "Epidemiological models.");
	epiworldpy::export_all_models(m_epimodels);

#ifdef VERSION_INFO
	/* Give the real version. */
	m.attr("__version__") = MACRO_STRINGIFY(VERSION_INFO);
#else
	/* Also give the real version, but prefix with 'dev'. */
	m.attr("__version__") = "dev-" MACRO_STRINGIFY(VERSION_INFO);
#endif
}
